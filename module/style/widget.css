@font-face {
  font-family: "Terminal";
  src: url(CourierPrime-Regular.ttf);
}

.nexis-widget {
  position: absolute;
  
  /* default styling */
  left: 0px;
  top: 0px;

  transform-origin: top left;

  user-select: none; /* set this as the default for widgets */
}

.nexis-widget.hidden {
  visibility: hidden;
  opacity: 0;
}

.nexis-widget:has(> .nexis-draggable-widget-containers) {
  pointer-events: none;
}

.nexis-draggable-widget-containers.nexis-widgets-hide-on-inactive > .nexis-draggable-widget-headers {
  opacity: 0.1;
}

.nexis-draggable-widget-containers.nexis-widgets-hide-on-inactive:has(> .nexis-draggable-widget-headers:not(:hover)) > .nexis-draggable-widget-bodies:not(:hover) {
  background: transparent !important;
  /* box-shadow: none; */
}

.nexis-draggable-widget-containers.nexis-widgets-hide-on-inactive > .nexis-draggable-widget-headers:hover {
  opacity: 1;
}

.nexis-draggable-widget-containers.nexis-widgets-hide-on-inactive:has(> .nexis-draggable-widget-bodies:hover) > .nexis-draggable-widget-headers {
  opacity: 0.5 !important;
}

/* .nexis-grid-widget:not(.no-cursor):hover {
  cursor: grab;
} */

.nexis-grid-widget.dragging:hover {
  cursor: move;
}


.nexis-block-widget {
  min-width: 50px;
  min-height: 50px;
  background: black;
}


.nexis-draggable-widget-containers {
  height: 100%;

  display: flex;
  flex-direction: column;
}

.nexis-draggable-widget-containers:not(.no-cursor) {
  & > .nexis-draggable-widget-headers > .nexis-draggable-widget-titles:hover,
  & > .nexis-draggable-widget-headers > .nexis-draggable-widget-title-ends:hover,
  & > .nexis-draggable-widget-bodies {
    cursor: grab;
  }
}

.nexis-draggable-widget-containers:not(.no-cursor).dragging {
  & > .nexis-draggable-widget-headers > .nexis-draggable-widget-titles:hover,
  & > .nexis-draggable-widget-headers > .nexis-draggable-widget-title-ends:hover,
  & > .nexis-draggable-widget-bodies {
    cursor: grabbing;
  }
}

/* Move widget to top when dragging */
.nexis-widget:has(> .nexis-draggable-widget-containers > .nexis-draggable-widget-headers.dragging) {
  z-index: 99999 !important;
}

.nexis-draggable-widget-headers {
  position: relative;
  margin-bottom: -4px;

  filter: drop-shadow(0px 0px 1px black);

  white-space: nowrap;
  overflow: hidden;

  transition: transform 150ms, filter 150ms, opacity 150ms;
  transform-origin: 0 0;
  opacity: 1;
}

.nexis-draggable-widget-headers:hover {
  z-index: 1; /* ensure header is in front of everything */
}

.nexis-draggable-widget-headers.draggable-widget-close {
  transform: scaleX(0);
  filter: drop-shadow(0px 0px 1px black) brightness(0);
  opacity: 0.5;
}

.nexis-draggable-widget-containers.draggable-widget-headerless > .nexis-draggable-widget-headers {
  display: none;
}

.nexis-draggable-widget-titles {
  position: relative;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  background-color: grey;

  display: inline-block;
  padding: 5px 5px 6px 5px;

  box-sizing: border-box;
  max-width: 100%;

  font-size: 11px;

  /* height: 100%; */

  transition: padding-right 100ms, border-radius 200ms;
  transition-delay: 0ms, 0ms;

  border-radius: 0px;
  font-family: 'Terminal';

  pointer-events: all;
}

.nexis-draggable-widget-title-texts {
  font-weight: normal;
  margin: 0px;
  padding: 0px;
  font-size: 1em;
  font-family: inherit;

  overflow: hidden;
  text-overflow: ellipsis;
}

.nexis-draggable-widget-containers:has(> .nexis-draggable-widget-bodies.draggable-widget-minimize) > .nexis-draggable-widget-headers > .nexis-draggable-widget-titles {
  border-bottom-right-radius: 15px;
  border-top-right-radius: 15px;
  transition-delay: 0ms, 100ms;
}

.nexis-draggable-widget-headers > .nexis-draggable-widget-title-ends {
  color: transparent;
  background-color: grey;
  display: inline-block;
  
  height: calc(100% - 4px);
  aspect-ratio: 5 / 4;
  position: absolute;

  transform: translateX(-1px); /* Fill horrible gap */
  transform-origin: 0 100%;

  clip-path: polygon(0 0, 2px 0, 100% 100%, 0% 100%);
  margin-bottom: -4px; /* remove strange gap between bottom of inline-block element and the parent */

  transition: transform 200ms, clip-path 200ms 200ms;
  transition-delay: 100ms, 100ms;

  pointer-events: all;
}

.nexis-draggable-widget-containers:has(> .nexis-draggable-widget-bodies.draggable-widget-minimize) > .nexis-draggable-widget-headers > .nexis-draggable-widget-title-ends {
  transform: translateX(-1px) scaleX(0);
  transition-delay: 0ms;
}

@keyframes minimize-bodies-forward {
  0% {
    transform: unset;
    display: block;
  }
  50% {
    transform: scaleX(0.05);
    filter: brightness(0);
    opacity: 0.5;
  }
  99% {
    transform: scale(0.05);
    display: block;
    filter: brightness(0);
    opacity: 0.5;
  }
  100% {
    transform: scale(0);
  }
}

@keyframes minimize-bodies-reverse {
  0% {
    visibility: visible;
    transform: scaleY(0.05);
    width: 0px;
    transform-origin: 100% 0%;
    filter: brightness(0);
    opacity: 0.5;
  }
  50% {
    width: 100%;
    transform: scaleY(0.05);
    
  }
  100% {
    transform-origin: 100% 0%;
    transform: unset;
  }
}

.nexis-draggable-widget-bodies {
  /* padding: 20px; */
  background: linear-gradient(315deg, #fffde1, #dddab1);
  visibility: visible;
  transform-origin: 0 0;

  animation: minimize-bodies-reverse 300ms;

  flex-grow: 1;
  position: relative;

  box-shadow: 0px 0px 1px black;
  min-height: 0px; /* default flex-child cannot be smaller than content; this overrides that */
  /* overflow: hidden; */

  pointer-events: all;
}
.nexis-draggable-widget-bodies.draggable-widget-minimize {
  animation: minimize-bodies-forward 300ms;
}

.nexis-draggable-widget-button-holder {
  position: absolute;
  top: 50%;
  right: 0px;
  transform: translate(100%, -50%);

  transition: transform 100ms, right 100ms;

  display: flex;
  gap: 2px;
}

.nexis-draggable-widget-titles.show-buttons > .nexis-draggable-widget-button-holder,
.nexis-draggable-widget-containers:has(> .nexis-draggable-widget-bodies.draggable-widget-minimize) > .nexis-draggable-widget-headers .nexis-draggable-widget-button-holder {
  transform: translateY(-50%);
  right: 5px;
}

.nexis-widget.is-minimized {
  width: min-content !important;
  height: unset !important;
}

.nexis-scene-holders-widget:has(> .nexis-draggable-widget-containers:is(.draggable-widget-fullscreen, .draggable-widget-fullscreen-exit)) {
  transition: top 200ms, left 200ms, width 200ms, height 200ms, transform 200ms;
}

.nexis-scene-holders-widget:has(> .nexis-draggable-widget-containers.draggable-widget-fullscreen) {
  top: 0px !important;
  left: 0px !important;
  width: 100% !important;
  height: 100% !important;

  transform: none !important;
}

.nexis-draggable-widget-containers.draggable-widget-fullscreen {
  & > .nexis-draggable-widget-headers {
    position: absolute;
    z-index: 1;
    top: 0px;
    left: 0px;

    & > .nexis-draggable-widget-title-ends {
      clip-path: polygon(0 0, 100% 0, 2px 100%, 0 100%);
    }
  }

  & > .nexis-draggable-widget-bodies {
    width: unset !important;
    height: unset !important;

    & > .nexis-addon-containers {
      display: none;
    }
  }
}

.nexis-draggable-widget-button-holder > .nexis-draggable-widget-buttons:hover {
  cursor: pointer;
}

.nexis-draggable-widget-buttons {
  border-radius: 50%;
  display: inline-block;

  position: relative;
  vertical-align: middle;
}

.nexis-draggable-widget-buttons > svg {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

.nexis-draggable-widget-buttons:not(.nexis-draggable-widget-button-alts) {
  &> svg.nexis-header-buttons-alt {
    display: none;
  }
}

.nexis-draggable-widget-buttons.nexis-draggable-widget-button-alts:has(> svg.nexis-header-buttons-alt) {
  &> svg.nexis-header-buttons-main {
    display: none;
  }
}

.draggable-widget-minimize {
  display: none;
}

@keyframes contextmenu-enter {
  from {
    transform: scaleY(0);
  }
  to {
    transform: scaleY(1);
  }
}

.nexis-resize-drag-container {
  pointer-events: none;
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0px;
  top: 0px;

  z-index: 1;

  &:has(> .nexis-resize-drag-element-side-left:hover) > .nexis-resize-drag-element-side-left,
  &:has(> .nexis-resize-drag-element-side-right:hover) > .nexis-resize-drag-element-side-right,
  &:has(> .nexis-resize-drag-element-side-top:hover) > .nexis-resize-drag-element-side-top,
  &:has(> .nexis-resize-drag-element-side-bottom:hover) > .nexis-resize-drag-element-side-bottom {
    opacity: 1;
  }
}

.nexis-widget:has(> .nexis-draggable-widget-containers > .nexis-draggable-widget-bodies.draggable-widget-minimize) > .nexis-resize-drag-element,
.nexis-scene-holders-widget:has(> .nexis-draggable-widget-containers.draggable-widget-fullscreen) > .nexis-resize-drag-element {
  display: none;
}

.nexis-resize-drag-element {
  background: #7bbbff;
  opacity: 0;
  pointer-events: all;
  position: absolute;

  transition: opacity 100ms;

  --resize-width: 3px;

  pointer-events: all;

  &.nexis-resize-drag-element-side-left {
    left: 0px;
    translate: -100% 0;
  }
  
  &.nexis-resize-drag-element-side-right {
    right: 0px;
    translate: 100% 0;
  }

  &.nexis-resize-drag-element-side-top {
    top: 0px;
    translate: 0 -100%;
  }

  &.nexis-resize-drag-element-side-bottom {
    bottom: 0px;
    translate: 0 100%;
  }
  
  &.nexis-resize-drag-element-side-right,
  &.nexis-resize-drag-element-side-left {
    top: var(--resize-width);
    height: calc(100% - 2 * var(--resize-width));
    width: var(--resize-width);

    &:hover {
      cursor: ew-resize;
    }
  }
  
  &.nexis-resize-drag-element-side-top,
  &.nexis-resize-drag-element-side-bottom {
    left: var(--resize-width);
    width: calc(100% - 2 * var(--resize-width));
    height: var(--resize-width);

    &:hover {
      cursor: ns-resize;
    }
  }

  &.nexis-resize-drag-element-side-top.nexis-resize-drag-element-side-left {
    left: calc(-1 * var(--resize-width));
    top: calc(-1 * var(--resize-width));
  }
  &.nexis-resize-drag-element-side-bottom.nexis-resize-drag-element-side-left {
    top: unset;
    left: calc(-1 * var(--resize-width));
    bottom: calc(-1 * var(--resize-width));
  }
  &.nexis-resize-drag-element-side-top.nexis-resize-drag-element-side-right {
    left: unset;
    right: calc(-1 * var(--resize-width));
    top: calc(-1 * var(--resize-width));
  }
  &.nexis-resize-drag-element-side-bottom.nexis-resize-drag-element-side-right {
    top: unset;
    left: unset;
    right: calc(-1 * var(--resize-width));
    bottom: calc(-1 * var(--resize-width));

    &:hover {
      cursor: nwse-resize;
    }
  }

  &.nexis-resize-drag-element-side-top.nexis-resize-drag-element-side-left,
  &.nexis-resize-drag-element-side-top.nexis-resize-drag-element-side-right,
  &.nexis-resize-drag-element-side-bottom.nexis-resize-drag-element-side-left,
  &.nexis-resize-drag-element-side-bottom.nexis-resize-drag-element-side-right {
    width: calc(2 * var(--resize-width));
    height: calc(2 * var(--resize-width));
    translate: 0 0;
  }

  &.nexis-resize-drag-element-side-bottom.nexis-resize-drag-element-side-right:hover,
  &.nexis-resize-drag-element-side-top.nexis-resize-drag-element-side-left:hover {
    cursor: nwse-resize;
  }

  &.nexis-resize-drag-element-side-bottom.nexis-resize-drag-element-side-left:hover,
  &.nexis-resize-drag-element-side-top.nexis-resize-drag-element-side-right:hover {
    cursor: nesw-resize;
  }
}

/* .nexis-resize-drag-element > svg {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.nexis-resize-drag-element:hover {
  border-color: black;
  opacity: 1;
  width: 15px;
  height: 15px;
} */

.nexis-resize-drag-element.nexis-dir-both:hover {
  cursor: nwse-resize;
}

.nexis-resize-drag-element.nexis-dir-horizontal:hover {
  cursor: ew-resize;
}

.nexis-resize-drag-element.nexis-dir-vertical:hover {
  cursor: ns-resize;
}


.nexis-contextmenu-containers {
  background-color: white;
  border: solid 1px grey;

  font-size: 11px;
  font-family: 'Courier New', Courier, monospace;

  box-shadow: 2px 2px 3px black;
  
  display: grid;
  grid-template-columns: min-content auto min-content;
  padding: 2px;

  transform-origin: 0 0;
  animation: contextmenu-enter 100ms;
}

.nexis-contextmenu-containers:empty {
  display: none;
}

.nexis-contextmenu-sections {
  display: contents;
}

.nexis-contextmenu-items {
  display: contents;
}

.nexis-contextmenu-items > :not(.nexis-contextmenu-icons) {
  padding-top: 4px;
  padding-bottom: 4px;
}

.nexis-contextmenu-items > :first-child {
  padding-left: 5px;
  padding-right: 10px;
}

.nexis-contextmenu-items > :last-child {
  padding-left: 5px;
  padding-right: 5px;
}

.nexis-contextmenu-shortcuts {
  color: grey;
}

.nexis-contextmenu-icons > svg {
  height: 0.8em;
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

.nexis-contextmenu-names:not(:empty) + .nexis-contextmenu-shortcuts:not(:empty) {
  padding-left: 5px;
}

.nexis-contextmenu-shortcuts:not(:empty):has(+ :not(:empty)) {
  padding-right: 5px;
}

.nexis-contextmenu-items.nexis-contextmenu-item-disabled > div {
  opacity: 0.5;
}

.nexis-contextmenu-items:has(> :hover):not(.nexis-contextmenu-item-disabled) > div {
  background-color: #d3d3d3;
}

.nexis-contextmenu-section-separators {
  grid-column: 1 / 4;
}

.nexis-contextmenu-section-separators:empty {
  height: 1px;
  background-color: #c5c5c5;
  margin-bottom: 4px;
  margin-top: 4px;
}

.nexis-contextmenu-section-separators:not(:empty) {
  position: relative;
  display: flex;
  flex-direction: row;
}

.nexis-contextmenu-section-separator-lines {
  flex-grow: 1;
  height: 1px;
  background-color: #c5c5c5;

  position: relative;
  top: calc(50% - 1px);

  min-width: 5px;
}

.nexis-contextmenu-section-separator-names {
  padding-right: 4px;
  padding-left: 4px;
  color: #636363;
}

.nexis-contextmenu-sections:first-child > .nexis-contextmenu-section-separators:empty {
  display: none;
}

.nexis-line-wire-widget > .nexis-wire-body {
  /* height: 2px; */
  /* background: black; */

  transform-origin: 0% 50%;
  position: relative;
  /* box-shadow: white 0px 0px 2px; */
}

.nexis-basic-wire-widget {
  position: absolute;
  pointer-events: none;

  svg {
    vertical-align: top;
  }

  /* Let SVG be clicked properly */
  &:not(.nexis-wire-is-editing) svg path {
    pointer-events: visiblePainted;
  }

  &:not(.nexis-wire-is-editing) > .nexis-wire-body:not(.nexis-wire-body-pointerless) {
    pointer-events: all;
  }
} 
